name: WASM Tests

on:
  push:
    branches:
      - main
    paths:
      - wasmModules/**
  pull_request:
    branches:
      - main
    paths:
      - wasmModules/**
  workflow_dispatch:

# Cancel any in-flight jobs for the same PR/branch so there's only one active
# at a time
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  discover:
    runs-on: ubuntu-latest
    outputs:
      modules: ${{ steps.set-modules.outputs.modules }}
      os: ${{ steps.set-os.outputs.os }}
    steps:
      - uses: actions/checkout@v4

      - id: set-modules
        run: |
          MODULES=$(find wasmModules -maxdepth 1 -mindepth 1 -type d -not -path "*/\.*" | jq -R -s -c 'split("\n")[:-1]')
          echo "modules=$MODULES" >> $GITHUB_OUTPUT
          echo "Found modules: $MODULES"

      - id: set-os
        run: |
          # If the workflow is triggered by a workflow_dispatch event, run on all OSs
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            OS='["ubuntu-latest", "macos-latest", "windows-latest"]'
          else
            # Otherwise, run on the default OS only
            OS='["ubuntu-latest"]'
          fi
          echo "os=$OS" >> $GITHUB_OUTPUT
          echo "Found OSs: $OS"

  rust-tests:
    runs-on: ubuntu-latest
    needs: discover
    strategy:
      fail-fast: false
      matrix:
        module: ${{ fromJson(needs.discover.outputs.modules) }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions-rust-lang/setup-rust-toolchain@v1

      - name: Run Rust tests for ${{ matrix.module }}
        run: |
          cd ${{ matrix.module }}
          cargo test --lib

  wasm-test:
    runs-on: ${{ matrix.os }}
    needs: discover
    strategy:
      fail-fast: false
      matrix:
        os: ${{ fromJson(needs.discover.outputs.os) }}
        browser: [firefox, chrome]
        module: ${{ fromJson(needs.discover.outputs.modules) }}

    steps:
      - uses: actions/checkout@v4

      - name: Install wasm-pack
        uses: jetli/wasm-pack-action@v0.4.0

      - name: Setup Firefox
        if: matrix.browser == 'firefox' && matrix.os != 'ubuntu-latest'
        uses: browser-actions/setup-firefox@v1

      - name: Test ${{ matrix.module }} in ${{ matrix.browser }}
        working-directory: ${{ matrix.module }}
        run: wasm-pack test --${{ matrix.browser }} --headless
